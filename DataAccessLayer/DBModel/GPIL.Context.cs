

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace DataAccessLayer.DBModel
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class GPILEntities : DbContext
{
    public GPILEntities()
        : base("name=GPILEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<TBL_Processes> TBL_Processes { get; set; }

    public virtual DbSet<TBL_ProcessInstanceDetails> TBL_ProcessInstanceDetails { get; set; }

    public virtual DbSet<TBL_ProcessInstances> TBL_ProcessInstances { get; set; }

    public virtual DbSet<TBL_States> TBL_States { get; set; }

    public virtual DbSet<TBL_AirlineGSTConfig> TBL_AirlineGSTConfig { get; set; }

    public virtual DbSet<TBL_Frequency> TBL_Frequency { get; set; }

    public virtual DbSet<TBL_BotInfo> TBL_BotInfo { get; set; }

    public virtual DbSet<TBL_BotProcessAssigment> TBL_BotProcessAssigment { get; set; }

    public virtual DbSet<TBL_Process_Frequency> TBL_Process_Frequency { get; set; }

    public virtual DbSet<TBL_MessageTracker> TBL_MessageTracker { get; set; }

    public virtual DbSet<TBL_ProcessInstanceData> TBL_ProcessInstanceData { get; set; }

    public virtual DbSet<TBL_ProcessInstanceError> TBL_ProcessInstanceError { get; set; }

    public virtual DbSet<TBL_InvoiceDetail> TBL_InvoiceDetail { get; set; }

    public virtual DbSet<TBL_UserLogin> TBL_UserLogin { get; set; }

    public virtual DbSet<TBL_ProcessExecution_Settings> TBL_ProcessExecution_Settings { get; set; }

    public virtual DbSet<TBL_EmailTracker> TBL_EmailTracker { get; set; }

    public virtual DbSet<TBL_ExcelRules> TBL_ExcelRules { get; set; }


    public virtual ObjectResult<Nullable<long>> USP_Insert_ProcessInstance(string processId, Nullable<long> parentProcessInstanceID)
    {

        var processIdParameter = processId != null ?
            new ObjectParameter("ProcessId", processId) :
            new ObjectParameter("ProcessId", typeof(string));


        var parentProcessInstanceIDParameter = parentProcessInstanceID.HasValue ?
            new ObjectParameter("ParentProcessInstanceID", parentProcessInstanceID) :
            new ObjectParameter("ParentProcessInstanceID", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("USP_Insert_ProcessInstance", processIdParameter, parentProcessInstanceIDParameter);
    }


    public virtual ObjectResult<TBL_ProcessInstances> USP_AllocateInstance(string serverName, string processID)
    {

        var serverNameParameter = serverName != null ?
            new ObjectParameter("ServerName", serverName) :
            new ObjectParameter("ServerName", typeof(string));


        var processIDParameter = processID != null ?
            new ObjectParameter("ProcessID", processID) :
            new ObjectParameter("ProcessID", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TBL_ProcessInstances>("USP_AllocateInstance", serverNameParameter, processIDParameter);
    }


    public virtual ObjectResult<TBL_ProcessInstances> USP_AllocateInstance(string serverName, string processID, MergeOption mergeOption)
    {

        var serverNameParameter = serverName != null ?
            new ObjectParameter("ServerName", serverName) :
            new ObjectParameter("ServerName", typeof(string));


        var processIDParameter = processID != null ?
            new ObjectParameter("ProcessID", processID) :
            new ObjectParameter("ProcessID", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TBL_ProcessInstances>("USP_AllocateInstance", mergeOption, serverNameParameter, processIDParameter);
    }


    public virtual int USP_CleanInstance(Nullable<long> processInstanceID)
    {

        var processInstanceIDParameter = processInstanceID.HasValue ?
            new ObjectParameter("ProcessInstanceID", processInstanceID) :
            new ObjectParameter("ProcessInstanceID", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CleanInstance", processInstanceIDParameter);
    }


    public virtual ObjectResult<USP_GetInvoiceByDownloadDate_Result> USP_GetInvoiceByDownloadDate(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string processId, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
    {

        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("startDate", startDate) :
            new ObjectParameter("startDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("endDate", endDate) :
            new ObjectParameter("endDate", typeof(System.DateTime));


        var processIdParameter = processId != null ?
            new ObjectParameter("ProcessId", processId) :
            new ObjectParameter("ProcessId", typeof(string));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInvoiceByDownloadDate_Result>("USP_GetInvoiceByDownloadDate", startDateParameter, endDateParameter, processIdParameter, pageIndexParameter, pageSizeParameter, recordCount);
    }


    public virtual ObjectResult<USP_GetDownloadDateExportReport_Result> USP_GetDownloadDateExportReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string processId, string filterType)
    {

        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("startDate", startDate) :
            new ObjectParameter("startDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("endDate", endDate) :
            new ObjectParameter("endDate", typeof(System.DateTime));


        var processIdParameter = processId != null ?
            new ObjectParameter("ProcessId", processId) :
            new ObjectParameter("ProcessId", typeof(string));


        var filterTypeParameter = filterType != null ?
            new ObjectParameter("FilterType", filterType) :
            new ObjectParameter("FilterType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetDownloadDateExportReport_Result>("USP_GetDownloadDateExportReport", startDateParameter, endDateParameter, processIdParameter, filterTypeParameter);
    }


    public virtual ObjectResult<USP_GetInvoiceByDate_New_Result> USP_GetInvoiceByDate_New(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string processId, Nullable<int> pageIndex, Nullable<int> pageSize, string filterType, ObjectParameter recordCount)
    {

        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("startDate", startDate) :
            new ObjectParameter("startDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("endDate", endDate) :
            new ObjectParameter("endDate", typeof(System.DateTime));


        var processIdParameter = processId != null ?
            new ObjectParameter("ProcessId", processId) :
            new ObjectParameter("ProcessId", typeof(string));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var filterTypeParameter = filterType != null ?
            new ObjectParameter("FilterType", filterType) :
            new ObjectParameter("FilterType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInvoiceByDate_New_Result>("USP_GetInvoiceByDate_New", startDateParameter, endDateParameter, processIdParameter, pageIndexParameter, pageSizeParameter, filterTypeParameter, recordCount);
    }


    public virtual ObjectResult<USP_GetInvoiceByDownloadDate_New_Result> USP_GetInvoiceByDownloadDate_New(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string processId, Nullable<int> pageIndex, Nullable<int> pageSize, string filterType, ObjectParameter recordCount)
    {

        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("startDate", startDate) :
            new ObjectParameter("startDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("endDate", endDate) :
            new ObjectParameter("endDate", typeof(System.DateTime));


        var processIdParameter = processId != null ?
            new ObjectParameter("ProcessId", processId) :
            new ObjectParameter("ProcessId", typeof(string));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var filterTypeParameter = filterType != null ?
            new ObjectParameter("FilterType", filterType) :
            new ObjectParameter("FilterType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInvoiceByDownloadDate_New_Result>("USP_GetInvoiceByDownloadDate_New", startDateParameter, endDateParameter, processIdParameter, pageIndexParameter, pageSizeParameter, filterTypeParameter, recordCount);
    }


    public virtual ObjectResult<USP_GetInvoiceDateExportReport_Result> USP_GetInvoiceDateExportReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string processId, string filterType)
    {

        var startDateParameter = startDate.HasValue ?
            new ObjectParameter("startDate", startDate) :
            new ObjectParameter("startDate", typeof(System.DateTime));


        var endDateParameter = endDate.HasValue ?
            new ObjectParameter("endDate", endDate) :
            new ObjectParameter("endDate", typeof(System.DateTime));


        var processIdParameter = processId != null ?
            new ObjectParameter("ProcessId", processId) :
            new ObjectParameter("ProcessId", typeof(string));


        var filterTypeParameter = filterType != null ?
            new ObjectParameter("FilterType", filterType) :
            new ObjectParameter("FilterType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetInvoiceDateExportReport_Result>("USP_GetInvoiceDateExportReport", startDateParameter, endDateParameter, processIdParameter, filterTypeParameter);
    }


    public virtual int USP_CleanAllLockdedInstance(string processID)
    {

        var processIDParameter = processID != null ?
            new ObjectParameter("ProcessID", processID) :
            new ObjectParameter("ProcessID", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CleanAllLockdedInstance", processIDParameter);
    }

}

}

