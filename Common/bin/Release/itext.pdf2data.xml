<?xml version="1.0"?>
<doc>
    <assembly>
        <name>itext.pdf2data</name>
    </assembly>
    <members>
        <member name="M:DualLab.Pdf2data.Detector.BunchFinder.GetBunches(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TextPieceInfo})">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Detector.ParagraphFinder.GetSmartAverageSpace(System.Double[],System.Int32,System.Int32,System.Boolean)">
            <summary>For columns return mean of spaces between columns.</summary>
            <remarks>
            For columns return mean of spaces between columns.
            Return -1 if between low ccord and top coord only one block of text.
            </remarks>
            <param name="freqArr">Array with frequencies for any coord.</param>
            <param name="low">Low threshold.</param>
            <param name="top">Top threshold.</param>
            <param name="isYArray">True if y-coord is considered.</param>
            <returns/>
        </member>
        <member name="M:DualLab.Pdf2data.Structure.TPIGroup.GetPage">
            <summary>Return a page of group.</summary>
            <returns>page number, 1-based</returns>
        </member>
        <member name="M:DualLab.Pdf2data.DocumentSource.#ctor(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.BorderExtractor.#ctor(System.String)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.BorderExtractor.#ctor(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7BorderExtractor.#ctor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7BorderExtractor.Init(iText.Kernel.Pdf.PdfDocument,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7ImageExtractor.#ctor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7ImageExtractor.Init(iText.Kernel.Pdf.PdfDocument,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.TaggedTableExtractor.ExtractMCIDTables(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7TaggedTableExtractor.ExtractMCIDTables(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7TaggedTableExtractor.InspectKids(System.Collections.Generic.IList{iText.Kernel.Pdf.Tagging.IStructureNode})">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7TaggedTableExtractor.InspectKid(iText.Kernel.Pdf.Tagging.IStructureNode)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.TPIExtractor.GetAllTPIBunches(System.Int32)">
            <param name="page">1-based page index</param>
            <returns/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.ITextTPIExtractor.GetAllTPIBunches(System.Int32)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.ITextTPIExtractor.Distinguish(System.Int32)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.ITextTPIExtractor.GetSortedBunches(System.Int32)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7TPIExtractor.#ctor(System.String)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7TPIExtractor.#ctor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7TPIExtractor.#ctor(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7TPIExtractor.Init(iText.Kernel.Pdf.PdfDocument)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7TPIExtractor.Init(iText.Kernel.Pdf.PdfDocument,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.IText7TPIExtractor.RenderPage(iText.Kernel.Pdf.PdfDocument,System.Int32,System.Collections.Generic.IList{System.Int32[]})">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.ScreenshotImageExtractor.GetImages(DualLab.Pdf2data.DocumentSource,System.Collections.Generic.IList{System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup}})">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.Impl.Itext.Itext7.ITextScreenshotImageExtractor.#ctor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.PageContent.#ctor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.PageContent.Close">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Content.PageContent.GetInfo(System.Int32)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.OutputXmlMaster.WriteXML(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup}}},System.String)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.OutputXmlMaster.WriteXML(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup}}},System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.OutputXmlMaster.Write(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup}}},System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.DocumentCleaner.RemoveAnnotations(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.DocumentCleaner.RemoveAnnotationsAndImages(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.PdfWriter.WriteResultsToPDF(DualLab.Pdf2data.DocumentSource,System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup}}})">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.PdfWriter.WriteResultsToPDF(DualLab.Pdf2data.DocumentSource,System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup}}})">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.PdfWriter.WriteResultsToPDF(DualLab.Pdf2data.DocumentSource,System.String,DualLab.Pdf2data.Result.ParsingResult)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.PdfWriter.WriteResultsToPDF(DualLab.Pdf2data.DocumentSource,System.IO.Stream,DualLab.Pdf2data.Result.ParsingResult)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.Impl.Itext7.IText7PdfWriter.WriteResultsToPDF(DualLab.Pdf2data.DocumentSource,System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup}}})">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.Impl.Itext7.IText7PdfWriter.WriteResultsToPDF(DualLab.Pdf2data.DocumentSource,System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup}}})">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.Impl.Itext7.IText7PdfWriter.WriteResultsToPDF(DualLab.Pdf2data.DocumentSource,System.String,DualLab.Pdf2data.Result.ParsingResult)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.Impl.Itext7.IText7PdfWriter.WriteResultsToPDF(DualLab.Pdf2data.DocumentSource,System.IO.Stream,DualLab.Pdf2data.Result.ParsingResult)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.Impl.Itext7.IText7PdfWriter.WriteResults(DualLab.Pdf2data.DocumentSource,System.Object,System.Object)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.Impl.Itext7.IText7PdfWriter.GetPdfDocument(DualLab.Pdf2data.DocumentSource,System.Object)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Pdf.Impl.Itext7.IText7PdfWriter.GetPdfReader(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Permission.PermissionProcessor.GetPermission(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Permission.PermissionProcessor.CheckForAnnotations(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Permission.PermissionProcessor.CheckForExtraction(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Permission.Impl.IText7PermissionProcessor.GetPermission(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Permission.Impl.IText7PermissionProcessor.CheckForAnnotations(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Permission.Impl.IText7PermissionProcessor.CheckForExtraction(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Recognizer.Recognize(DualLab.Pdf2data.Template.Template,System.String)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Recognizer.Recognize(DualLab.Pdf2data.Template.Template,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Recognizer.Recognize(DualLab.Pdf2data.Template.Template,DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Recognizer.RecognizeImpl(DualLab.Pdf2data.Template.Template,DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Recognizer.RunSelectors(DualLab.Pdf2data.Template.Template,DualLab.Pdf2data.IO.Content.PageContent,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup}}})">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Recognizer.RunBarcodeSelector(DualLab.Pdf2data.IO.Content.PageContent,System.Collections.Generic.IList{System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup}},DualLab.Pdf2data.Selector.Base.AbstractSelector)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Recognizer.AddAdditionals(DualLab.Pdf2data.IO.Content.PageContent,DualLab.Pdf2data.Selector.Base.Selector,System.Int32,System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},System.Boolean)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Template.TemplateParser.ProcessAnnotations(DualLab.Pdf2data.Template.Template,System.Collections.Generic.IList{DualLab.Pdf2data.Template.Annotation})">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Template.TemplateParser.FitTemplate(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template,System.Collections.Generic.IList{DualLab.Pdf2data.Template.DataField})">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Template.TemplateParser.FitTemplate(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template,DualLab.Pdf2data.Template.Template,System.Collections.Generic.IList{DualLab.Pdf2data.Template.DataField})">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Template.TemplateParser.GetTPIExtractor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Template.TemplateParser.GetBorderExtractor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Template.TemplateParser.ParseDatafield(DualLab.Pdf2data.Template.Template,DualLab.Pdf2data.Template.Annotation)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Template.PdfTemplateParser.ParseTemplate(System.String)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Template.PdfTemplateParser.ParseTemplate(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Template.Impl.Itext7.IText7TemplateParser.ParseTemplate(System.String)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Template.Impl.Itext7.IText7TemplateParser.ParseTemplate(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Template.Impl.Itext7.IText7TemplateParser.GetTPIExtractor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.IO.Template.Impl.Itext7.IText7TemplateParser.GetBorderExtractor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Lib.PdfLibFactory.GetBorderExtractor(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Lib.PdfLibFactory.GetBorderExtractor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Lib.PdfLibFactory.GetTPIExtractor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Lib.PdfLibFactory.GetImageExtractor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Lib.IText7LibFactory.GetBorderExtractor(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Lib.IText7LibFactory.GetBorderExtractor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Lib.IText7LibFactory.GetTPIExtractor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Lib.IText7LibFactory.GetImageExtractor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="T:DualLab.Pdf2data.Pdf2DataExtractor">
            <summary>Pdf2DataExtractor is a class for extracting templates and data from PDF files.</summary>
            <remarks>
            Pdf2DataExtractor is a class for extracting templates and data from PDF files.
            <p>To extract templates, use
            <see cref="M:DualLab.Pdf2data.Pdf2DataExtractor.ParseTemplateFromPDF(System.String)"/>
            or
            <see cref="M:DualLab.Pdf2data.Pdf2DataExtractor.ParseTemplateFromXML(System.String)"/>
            .</p>
            <p>To perform a single data extraction, use
            <see cref="M:DualLab.Pdf2data.Pdf2DataExtractor.Recognize(DualLab.Pdf2data.Template.Template,System.String)"/>
            .</p>
            <p>To perform a batch extraction, it is recommended to create an instance of Pdf2DataExctractor
            and then use
            <see cref="M:DualLab.Pdf2data.Pdf2DataExtractor.Recognize(System.String)"/>
            method for each pdf file.</p>
            </remarks>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.ParseTemplateFromPDF(System.String)">
            <summary>Parses the template from pdf file.</summary>
            <param name="templatePDF">a path to pdf file</param>
            <returns>A template instance.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.ParseTemplateFromPDF(System.String,System.String)">
            <summary>Parses the template from pdf file and save it into xml file.</summary>
            <param name="templatePDF">a path to pdf file</param>
            <param name="outXML">a path to xml file</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.ParseTemplateFromPDF(System.IO.Stream)">
            <summary>Parses the template from input stream.</summary>
            <param name="templateInputStream">pdf input stream with template</param>
            <returns>A template instance.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.ParseTemplateFromPDF(System.IO.Stream,System.IO.Stream)">
            <summary>Parses the template from pdf input stream and save it into output stream in xml form.</summary>
            <param name="templateInputStream">input stream with template</param>
            <param name="xmlStream">output stream for saving template</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.ParseTemplateFromXML(System.String)">
            <summary>Gets the template from xml file.</summary>
            <param name="templateXML">a path to xml file</param>
            <returns>Template instance.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.ParseTemplateFromXML(System.IO.Stream)">
            <summary>Gets the template from input stream.</summary>
            <param name="xmlInputStream">input stream that contains template in xml form</param>
            <returns>Template instance.</returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.Recognize(DualLab.Pdf2data.Template.Template,System.String)">
            <summary>Recognizes a pdf file using template instance.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <returns>Result of recognition.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.Recognize(DualLab.Pdf2data.Template.Template,System.String,System.String)">
            <summary>Recognize a pdf file using template instance and write results to pdf file.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputPDF">path to pdf file with recognition results (annotation type)</param>
            <returns>Result of recognition.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentAnnotationsDeniedException">if pdf document is encrypted and creating/modifying annotations is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.Recognize(DualLab.Pdf2data.Template.Template,System.IO.Stream)">
            <summary>Recognizes a pdf file using template instance.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <returns>Result of recognition.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.Recognize(DualLab.Pdf2data.Template.Template,System.IO.Stream,System.IO.Stream)">
            <summary>Recognizes a pdf file using template instance and write results to pdf file.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <returns>Result of recognition.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentAnnotationsDeniedException">if pdf document is encrypted and creating/modifying annotations is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.Recognize(System.String)">
            <summary>Recognize a pdf file using template instance.</summary>
            <param name="targetPDF">path to pdf file for recognition</param>
            <returns>Result of recognition.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.Recognize(System.String,System.String)">
            <summary>Recognize a pdf file using template instance and write results to pdf file.</summary>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputPDF">path to pdf file with recognition results (annotation type)</param>
            <returns>Result of recognition.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentAnnotationsDeniedException">if pdf document is encrypted and creating/modifying annotations is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.Recognize(System.IO.Stream)">
            <summary>Recognize a pdf file using template instance.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <returns>Result of recognition.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.Recognize(System.IO.Stream,System.IO.Stream)">
            <summary>Recognize a pdf file using template instance and write results to pdf file.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <returns>Result of recognition.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentAnnotationsDeniedException">if pdf document is encrypted and creating/modifying annotations is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.RecognizeToXML(DualLab.Pdf2data.Template.Template,System.String,System.String)">
            <summary>Recognize a pdf file using template instance and save results to xml file.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputXML">path to xml file with recognition results</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.RecognizeToXML(DualLab.Pdf2data.Template.Template,System.String,System.String,DualLab.Pdf2data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to xml file.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputXML">path to xml file with recognition results</param>
            <param name="properties">a <code>RecognitionProperties</code> instance</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.RecognizeToXML(DualLab.Pdf2data.Template.Template,System.String,System.String,System.String)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputPDF">path to pdf file with recognition results (annotation type)</param>
            <param name="outputXML">path to xml file with recognition results</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentAnnotationsDeniedException">if pdf document is encrypted and creating/modifying annotations is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.RecognizeToXML(DualLab.Pdf2data.Template.Template,System.String,System.String,System.String,DualLab.Pdf2data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="template">template instance</param>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputPDF">path to pdf file with recognition results (annotation type)</param>
            <param name="outputXML">path to xml file with recognition results</param>
            <param name="properties">a <code>RecognitionProperties</code> instance</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentAnnotationsDeniedException">if pdf document is encrypted and creating/modifying annotations is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.RecognizeToXML(DualLab.Pdf2data.Template.Template,System.IO.Stream,System.IO.Stream)">
            <summary>Recognize a pdf file using template instance and save results to xml file.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="xmlOutputStream">output stream for writing recognition results (xml type)</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.RecognizeToXML(DualLab.Pdf2data.Template.Template,System.IO.Stream,System.IO.Stream,DualLab.Pdf2data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to xml file.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="xmlOutputStream">output stream for writing recognition results (xml type)</param>
            <param name="properties">a <code>RecognitionProperties</code> instance</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.RecognizeToXML(DualLab.Pdf2data.Template.Template,System.IO.Stream,System.IO.Stream,System.IO.Stream)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <param name="xmlOutputStream">output stream for writing recognition results (xml type)</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentAnnotationsDeniedException">if pdf document is encrypted and creating/modifying annotations is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.RecognizeToXML(DualLab.Pdf2data.Template.Template,System.IO.Stream,System.IO.Stream,System.IO.Stream,DualLab.Pdf2data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="template">template instance</param>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <param name="xmlOutputStream">output stream for writing recognition results (xml type)</param>
            <param name="properties">a <code>RecognitionProperties</code> instance</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentAnnotationsDeniedException">if pdf document is encrypted and creating/modifying annotations is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.RecognizeToXML(System.String,System.String,System.String)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputPDF">path to pdf file with recognition results (annotation type)</param>
            <param name="outputXML">path to xml file with recognition results</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentAnnotationsDeniedException">if pdf document is encrypted and creating/modifying annotations is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.RecognizeToXML(System.String,System.String,System.String,DualLab.Pdf2data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="targetPDF">path to pdf file for recognition</param>
            <param name="outputPDF">path to pdf file with recognition results (annotation type)</param>
            <param name="outputXML">path to xml file with recognition results</param>
            <param name="properties">a <code>RecognitionProperties</code> instance</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentAnnotationsDeniedException">if pdf document is encrypted and creating/modifying annotations is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.RecognizeToXML(System.IO.Stream,System.IO.Stream,System.IO.Stream)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <param name="xmlOutputStream">output stream for writing recognition results (xml type)</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentAnnotationsDeniedException">if pdf document is encrypted and creating/modifying annotations is not permitted
                </exception>
        </member>
        <member name="M:DualLab.Pdf2data.Pdf2DataExtractor.RecognizeToXML(System.IO.Stream,System.IO.Stream,System.IO.Stream,DualLab.Pdf2data.RecognitionProperties)">
            <summary>Recognize a pdf file using template instance and save results to xml and pdf files.</summary>
            <param name="targetInputStream">input stream from pdf file for recognition</param>
            <param name="pdfOutputStream">output stream for writing recognition results (pdf annotation type)</param>
            <param name="xmlOutputStream">output stream for writing recognition results (xml type)</param>
            <param name="properties">a <code>RecognitionProperties</code> instance</param>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentExtractionDeniedException">if pdf document is encrypted and extracting text is not permitted
                </exception>
            <exception cref="T:DualLab.Pdf2data.Exception.DocumentAnnotationsDeniedException">if pdf document is encrypted and creating/modifying annotations is not permitted
                </exception>
        </member>
        <member name="T:DualLab.Pdf2data.RecognitionProperties">
            <summary>The <i>RecognitionProperties</i> class represents properties of recognition.</summary>
        </member>
        <member name="M:DualLab.Pdf2data.RecognitionProperties.#ctor">
            <summary>Creates an instance of properties with default state of extracting coordinates as <i>false</i></summary>
        </member>
        <member name="M:DualLab.Pdf2data.RecognitionProperties.AddExtractionCoordinates(System.Boolean)">
            <summary>Sets if coordinates will be extracted during recognition</summary>
            <param name="needCoord"><i>true</i> or <i>false</i></param>
        </member>
        <member name="M:DualLab.Pdf2data.RecognitionProperties.NeedCoordinates">
            <summary>Returns a state of extracting coordinates</summary>
            <returns/>
        </member>
        <member name="M:DualLab.Pdf2data.Rendering.PdfRenderer.Close">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Rendering.Impl.PdfiumRenderer.OpenDocumentIfNecessary">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Rendering.PdfRendererFactory.CreateNonSharedRenderer(DualLab.Pdf2data.DocumentSource,System.Single)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:DualLab.Pdf2data.Result.ParsingResult">
            <summary>An object that contains results of recognition.</summary>
            <remarks>
            An object that contains results of recognition.
            <p>There are recognized data for each data field, messages for unrecognized data field
            (if it wasn't recognized due to some error) and some stats: number of correctly recognized
            data fields, number of data fields recognized with warnings and number of data fields
            recognized with errors.</p>
            </remarks>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.GetMessage(System.String)">
            <summary>Return an error or warning message for datafield.</summary>
            <param name="dataFieldName">datafield name</param>
            <returns>The message if datafield wasn't recognized or <i>null</i> otherwise.</returns>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.SaveToXML(System.String)">
            <summary>Saves parsing results to xml file.</summary>
            <param name="outputXML">path to xml file</param>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.SaveToXML(System.String,DualLab.Pdf2data.RecognitionProperties)">
            <summary>Saves parsing results to xml file.</summary>
            <param name="outputXML">path to xml file</param>
            <param name="properties">a <code>RecognitionProperties</code> instance</param>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.SaveToXML(System.IO.Stream)">
            <summary>Saves parsing results to output stream in xml form.</summary>
            <param name="xmlOutputStream">output stream</param>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.SaveToXML(System.IO.Stream,DualLab.Pdf2data.RecognitionProperties)">
            <summary>Saves parsing results to output stream in xml form.</summary>
            <param name="xmlOutputStream">output stream</param>
            <param name="properties">a <code>RecognitionProperties</code> instance</param>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.GetResults(System.String)">
            <summary>Returns list of recognized objects.</summary>
            <param name="dataFieldName">data field name</param>
            <returns>
            list of corresponding recognized objects or <i>null</i> if recognition was aborted or
            there is no data field with specific name
            </returns>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.GetAllResults">
            <summary>Returns a map with recognition results.</summary>
            <returns>Map with datafield name as key and list with recognition elements as value.</returns>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.GetFirstResultAsTable(System.String)">
            <summary>Checks if recognized elements for specified data field are tables and returns first of them.</summary>
            <param name="dataFieldName">data field name</param>
            <returns>
            first table or <i>null</i> if there are no recognized tables or <i>null</i> if recognition was aborted or
            there is no data field with specific name
            </returns>
            <exception cref="T:System.InvalidCastException">if results for specified datafield aren't tables</exception>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.GetFirstResultAsImage(System.String)">
            <summary>Checks if recognized elements for specified datafield are images and returns first of them.</summary>
            <param name="dataFieldName">datafield name</param>
            <returns>
            first image or <i>null</i> if there are no recognized images or <i>null</i> if recognition was aborted or
            there is no data field with specific name
            </returns>
            <exception cref="T:System.InvalidCastException">if results for specified datafield aren't images</exception>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.GetFirstResultAsText(System.String)">
            <summary>Checks if recognized elements for specified datafield aren't tables and returns first of them.</summary>
            <param name="dataFieldName">datafield name</param>
            <returns>
            first result as string or <i>null</i> if there are no recognized elements or <i>null</i> if recognition was aborted or
            there is no data field with specific name
            </returns>
            <exception cref="T:System.InvalidCastException">if results for specified datafield are tables</exception>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.GetWarningsNumber">
            <summary>Returns a number of data fields that were recognized with warnings.</summary>
            <returns/>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.GetErrorsNumber">
            <summary>Returns a number of data fields that were recognized with errors.</summary>
            <returns/>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ParsingResult.GetCorrectNumber">
            <summary>Returns a number of data fields that were recognized correctly.</summary>
            <returns/>
        </member>
        <member name="T:DualLab.Pdf2data.Result.ResultCell">
            <summary>Instance of recognized table cell</summary>
        </member>
        <member name="T:DualLab.Pdf2data.Result.ResultElement">
            <summary>Instance of recognized data</summary>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultElement.GetBbox">
            <summary>Return a boundary box of recognized element.</summary>
            <returns/>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultElement.SetBbox(DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <summary>Set a boundary box for recognized element</summary>
            <param name="bbox"/>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultElement.GetPage">
            <summary>Return a page of recognized element.</summary>
            <returns>page index, one-based</returns>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultElement.SetPage(System.Int32)">
            <summary>Set a page of recognized element.</summary>
            <param name="page"/>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultCell.ToString">
            <summary>Returns a string presentation of the table cell.</summary>
            <returns/>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultCell.GetRowspan">
            <summary>Returns a cell rowspan.</summary>
            <returns/>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultCell.GetColspan">
            <summary>Returns a cell colspan.</summary>
            <returns/>
        </member>
        <member name="T:DualLab.Pdf2data.Result.ResultImage">
            <summary>Bytes presentation of recognized image</summary>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultImage.GetBytes">
            <summary>Get bytes of recognized image</summary>
            <returns/>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultImage.ToString">
            <summary>Returns a string presentation of recognized element.</summary>
            <returns/>
        </member>
        <member name="T:DualLab.Pdf2data.Result.ResultTable">
            <summary>String presentation of recognized elements like Table</summary>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultTable.GetNumberOfRows">
            <summary>Returns a number of table rows.</summary>
            <returns/>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultTable.GetNumberOfColumns">
            <summary>Returns a number of table columns.</summary>
            <returns/>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultTable.GetCell(System.Int32,System.Int32)">
            <summary>Returns a cell with specified row and column indexes.</summary>
            <param name="row">index of row (from 1 to ...)</param>
            <param name="column">index of column (from 1 to ...)</param>
            <returns>Text cell if indexes are valid or <i>null</i> if they aren't.</returns>
        </member>
        <member name="T:DualLab.Pdf2data.Result.ResultText">
            <summary>String presentation of recognized elements like Bunch, Line or Paragraph</summary>
        </member>
        <member name="M:DualLab.Pdf2data.Result.ResultText.ToString">
            <summary>Returns a string presentation of recognized element.</summary>
            <returns/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Base.Selector.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Base.AbstractSelector.Select(System.Collections.Generic.IList{System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup}})">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Base.AbstractTableSelector.GetAbsoluteColumn(System.String,DualLab.Pdf2data.Structure.Text.TPITable)">
            <exception cref="T:DualLab.Pdf2data.Selector.Base.AbstractTableSelector.TableIndexesException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Base.AbstractTableSelector.GetAbsoluteRow(System.Int32,DualLab.Pdf2data.Structure.Text.TPITable)">
            <exception cref="T:DualLab.Pdf2data.Selector.Base.AbstractTableSelector.TableIndexesException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Base.AbstractTableSelector.GetAbsoluteColumn(System.Int32,DualLab.Pdf2data.Structure.Text.TPITable)">
            <exception cref="T:DualLab.Pdf2data.Selector.Base.AbstractTableSelector.TableIndexesException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Base.BunchSelector.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Base.BunchSelector.Fit(DualLab.Pdf2data.Structure.TPIGroup)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.BarcodeSelector.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.FooterSelector.Fit(DualLab.Pdf2data.Rendering.PdfRenderer)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.HeaderSelector.Fit(DualLab.Pdf2data.Rendering.PdfRenderer)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.ImageSelector.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Picker.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Table.TableSelector.Select(System.Collections.Generic.IList{System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup}},System.Collections.Generic.IList{DualLab.Pdf2data.Structure.PageTableBorders})">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Table.TableSelector.Fit(DualLab.Pdf2data.IO.Content.TPIExtractor,System.Collections.Generic.IList{DualLab.Pdf2data.Structure.PageTableBorders},System.Collections.Generic.IList{DualLab.Pdf2data.Structure.Tagging.MCIDTable},System.Int32,DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Text.FontSelector.Fit(DualLab.Pdf2data.Structure.TPIGroup)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Text.Regexp.RegExpSelector.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Text.Regexp.SimpleRESelector.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Text.Regexp.Special.Impl.DateSelector.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Text.Regexp.Special.Impl.IBANSelector.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Text.Regexp.Special.Impl.PriceSelector.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Text.Regexp.Special.Impl.TimeSelector.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Text.Regexp.Special.Impl.VATSelector.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Text.Regexp.Special.SpecialRegExpFactory.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle,DualLab.Pdf2data.Selector.Impl.Text.Regexp.Special.KeywordSelector)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.Impl.Text.Regexp.Special.SpecialRegExpFactory.Fit(System.Collections.Generic.IList{DualLab.Pdf2data.Structure.TPIGroup},DualLab.Pdf2data.Structure.Geom.Rectangle,System.String,System.Collections.Generic.IList{DualLab.Pdf2data.Selector.Impl.Text.Regexp.Special.KeywordSelector},System.Boolean,DualLab.Pdf2data.Selector.Impl.Text.Regexp.Special.KeywordSelector)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.FitSelector(DualLab.Pdf2data.Template.Annotation,DualLab.Pdf2data.Selector.Base.Selector)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseSelector(DualLab.Pdf2data.Structure.Geom.Rectangle,System.Collections.Generic.LinkedList{System.String},System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseLineSelector(System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseAlignSelector(System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseBoundarySelector(DualLab.Pdf2data.Structure.Geom.Rectangle,System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseFontStyleSelector(System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseBarcodeSelector(DualLab.Pdf2data.Structure.Geom.Rectangle,System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseParagraphSelector(System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParsePickerSelector(System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParsePatternSelector(System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseClusterTableSelector(System.Collections.Generic.LinkedList{System.String},System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseTableSelector(System.Collections.Generic.LinkedList{System.String},System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseFreqTableSelector(DualLab.Pdf2data.Structure.Geom.Rectangle,System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseRegExpSelector(DualLab.Pdf2data.Structure.Geom.Rectangle,System.Collections.Generic.LinkedList{System.String},System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParsePageSelector(System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseImageSelector(System.String[])">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.GetStringFromToken(System.String)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseStringKeyword(System.String,System.String,System.Boolean)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Selector.SelectorFactory.ParseStringKeyword(System.String,System.String)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Template.DataField.#ctor(System.String,DualLab.Pdf2data.Structure.Geom.Rectangle,System.Int32)">
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Template.DataField.GetPage">
            <summary>1-based</summary>
        </member>
        <member name="M:DualLab.Pdf2data.Template.DataField.SetPage(System.Int32)">
            <summary>1-based</summary>
        </member>
        <member name="M:DualLab.Pdf2data.Template.DataField.FitSelectors(DualLab.Pdf2data.Template.Annotation)">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateRecognitionException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Template.DataField.ParseSelectors(System.Collections.Generic.IList{System.String})">
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Template.Template.GetDataFieldList(System.Int32)">
            <param name="page">page index (0-based)</param>
            <returns/>
        </member>
        <member name="M:DualLab.Pdf2data.Template.TemplateMaster.GetTemplateFromPDF(System.String)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Template.TemplateMaster.GetTemplateFromPDF(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:DualLab.Pdf2data.Exception.TemplateParsingException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Template.TemplateMaster.GetTemplateFromXML(System.String)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Template.TemplateMaster.GetTemplateFromXML(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Template.TemplateMaster.WriteTemplateToXML(DualLab.Pdf2data.Template.Template,System.String)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Template.TemplateMaster.WriteTemplateToXML(DualLab.Pdf2data.Template.Template,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Util.FooterHeaderUtil.Fit(DualLab.Pdf2data.Rendering.PdfRenderer,System.Boolean,System.Boolean)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Util.FooterHeaderUtil.Fit(DualLab.Pdf2data.Rendering.PdfRenderer)">
            <exception cref="T:System.Threading.ThreadInterruptedException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Util.ImageUtil.GetBytes(System.Drawing.Image)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Util.ImageUtil.GetImage(System.Byte[])">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Util.ImageUtil.Transform(DualLab.Pdf2data.Structure.Image)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Util.Impl.Itext7.IText7DocumentHelper.GetPdfDocument(DualLab.Pdf2data.DocumentSource)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Util.Impl.Itext7.IText7DocumentHelper.GetPdfDocument(DualLab.Pdf2data.DocumentSource,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Util.Impl.Itext7.IText7DocumentHelper.GetPdfDocument(DualLab.Pdf2data.DocumentSource,System.String)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Util.PageProperties.Init(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:DualLab.Pdf2data.Util.Impl.Itext7.IText7PageProperties.#ctor(DualLab.Pdf2data.DocumentSource,DualLab.Pdf2data.Template.Template)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:DualLab.Pdf2data.Util.Pair`2">
            <summary><p>A convenience class to represent name-value pairs.</p></summary>
            <since>JavaFX 2.0</since>
        </member>
        <member name="F:DualLab.Pdf2data.Util.Pair`2.key">
            <summary>Key of this <code>Pair</code>.</summary>
        </member>
        <member name="M:DualLab.Pdf2data.Util.Pair`2.GetKey">
            <summary>Gets the key for this pair.</summary>
            <returns>key for this pair</returns>
        </member>
        <member name="F:DualLab.Pdf2data.Util.Pair`2.value">
            <summary>Value of this this <code>Pair</code>.</summary>
        </member>
        <member name="M:DualLab.Pdf2data.Util.Pair`2.GetValue">
            <summary>Gets the value for this pair.</summary>
            <returns>value for this pair</returns>
        </member>
        <member name="M:DualLab.Pdf2data.Util.Pair`2.#ctor(`0,`1)">
            <summary>Creates a new pair</summary>
            <param name="key">The key for this pair</param>
            <param name="value">The value to use for this pair</param>
        </member>
        <member name="M:DualLab.Pdf2data.Util.Pair`2.ToString">
            <summary>
            <p><code>String</code> representation of this
            <code>Pair</code>.</p>
            <p>The default name/value delimiter '=' is always used.</p>
            </summary>
            <returns><code>String</code> representation of this <code>Pair</code></returns>
        </member>
        <member name="M:DualLab.Pdf2data.Util.Pair`2.GetHashCode">
            <summary>
            <p>Generate a hash code for this <code>Pair</code>.</p>
            <p>The hash code is calculated using both the name and
            the value of the <code>Pair</code>.</p>
            </summary>
            <returns>hash code for this <code>Pair</code></returns>
        </member>
        <member name="M:DualLab.Pdf2data.Util.SerializingUtil.Serialize(System.Object,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
    </members>
</doc>
